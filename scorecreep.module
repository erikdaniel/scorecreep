<?php

/**
 * @file
 * This is an example outlining how a module can be used to define a new
 * node type.  In Drupal 7 we move most of what was once needed in this file
 * to the scorecreep.install file so that it can be managed efficiently.
 *
 * Our example node type will allow users to specify multiple "colors",
 * a "quantity" and an "image" for their nodes; some kind of rudimentary
 * inventory-tracking system, perhaps?
 *
 * In previous versions of Drupal, "teaser" and "page" were node view modes.  In
 * Drupal 7 we can define custom view modes to let the node know how it should
 * return it's data.  This module declares a custom view mode called
 * "example_node_list".
 *
 * We no longer need an extra database table to store this content type's
 * information.
 *
 * Most node types that provide fields do not require any custom code for
 * the fields, as the fields system provides storage and access.
 *
 * See @link http://drupal.org/node/707832 Field API Tutorial @endlink
 *
 * See @link http://drupal.org/node/443536 Field API Handbook Page @endlink
 *
 * See @link field Field API documentation @endlink
 *
 * See @link field_example.install field_example.install @endlink
 *
 * Remember that most node types do not require any custom code, as one
 * simply creates them using the fields UI.
 */
module_load_include('inc', 'node', 'node.pages');   
module_load_include('inc', 'scorecreep', 'scorecreep.utils');   
/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view
 * mode that will live at http://example.com/?q=examples/scorecreep
 */
function scorecreep_menu() {
  $items['scorecreep/bout'] = array(
    'page callback' => 'scorecreep_page',
    'access arguments' => array('access content'),
    'title' => 'PSi Scorecreep',
  );
  $items['scorecreep/bout/%node'] = array(
    'title callback' => 'bout_page_title',
    'title arguments' => array(2),
    // The page callback also invokes drupal_set_title() in case
    // the menu router's title is overridden by a menu link.
    'page callback' => 'bout_page_view',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
  );
  $items['scorecreep/bout/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

   $items['scorecreep/bout/%node/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'node_page_edit',
      'page arguments' => array(2),
      'access callback' => 'node_access',
      'access arguments' => array('update', 2),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      //'file' => 'node.pages.inc',
    );
    $items['scorecreep/bout/%node/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('node_delete_confirm', 2),
      'access callback' => 'node_access',
      'access arguments' => array('delete', 2),
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      //'file' => 'node.pages.inc',
    );



  $items['scorecreep/bout/%bout_id_or_alias/add/performance'] = array(
    'title' => 'Add Performance',
    'title callback' => 'check_plain',
    'page callback' => 'performance_add',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'scorecreep_performance content'),
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'description' => '',
    //'file' => 'node.pages.inc',
  );

  return $items;
}
/**
 * Returns a node submission form.
 */
function performance_add($bout) {
  global $user;
  $type = 'scorecreep_performance';

  $types = node_type_get_types();
  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
  drupal_set_title(t('Add @name to Bout @bout', array('@name' => $types[$type]->name, '@bout' => $bout)), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node, (object)array('bout_id' => $bout));
  return $output;
}


/**
 * Implements hook_FORM_TYPE_form_alter().
 *
 */
function scorecreep_form_scorecreep_performance_node_form_alter(&$form, &$form_state, $form_id) {
  $bout_id = isset($form_state['build_info']['args'][1]->bout_id) ? $form_state['build_info']['args'][1]->bout_id:null;
  // only edit the form if we are in a bout/%/performance/add
  if ($bout_id) {
    $form_state['scorecreep']['bout'] = $bout_id;

    // TODO remove - just messing about
    $form['description'] = array(
      '#type' => 'item',
      '#title' => t('The current bout is @bout', array('@bout' => $bout_id)),
      '#description' => t('Waddup'),
    );

     // Converting the bout from textfield to 'value' so its not exposed in this form
    $form['field_perf_bout']['und'][0]['value']['#type'] = 'value';
    $form['field_perf_bout']['und'][0]['value']['#value'] =  $bout_id;

    // Add our custom submit handler.
    $form['actions']['submit']['#submit'][] = 'scorecreep_performance_set_redirect'; 
  }

  //dvm($form_state);
}


/**
 * Handler to set the redirect on a performance submit
 * back to the bout.
 */
function scorecreep_performance_set_redirect( $form, &$form_state) {
  $bout_id = $form_state['scorecreep']['bout'];
  $alias = drupal_lookup_path('alias', 'node/' . $bout_id);
  $form_state['redirect'] = $alias;
}

/**
 * Bout title creation Callback.
 */
function bout_page_title($node) {
  return '';
}

/**
 * Implements hook_block_info().
 */
function scorecreep_block_info() {
  $blocks = array();

  $blocks['bout_scores'] = array(
    'info' => t('Display scores and ranks for bout.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['team_scores'] = array(
    'info' => t('Display scores and ranks for a team.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


function scorecreep_block_view($delta = '') {
  $output = '';
  $path = explode('/', request_path());
  switch ($delta) {
    case 'bout_scores':
    $subject = t('Total Scores');
    if ($path[0] == 'scorecreep' && $path[1] == 'bout') {
      $bout_id = bout_id_or_alias_load($path[2]);
      if ($node = menu_get_object()) {
        $bout_id = $node->field_bout['und'][0]['tid'];
      }
      $scores = _scorecreep_get_bout_scores($bout_id);
      $entries = _scorecreep_parse_bout_scores($scores);

      if (!empty($entries)) {
        foreach ($entries as $entry) {
          // Sanitize the data before handing it off to the theme layer.
          $rows[] = array_map('check_plain', $entry);
        }
        // Make a table for them.
        $header = array(t('Team'), t('Rank'), t('Score'));
        $output .= theme('table', array('header' => $header, 'rows' => $rows));
      }
      else {
        $output = t('No scores in this bout.');
      }
    }
    else {
      $output = t('No bout id.');
    }
    break;

  case 'team_scores':
    $team = array();
    $subject = t('Team Scores');
    $output = t('No ranks or scores for this team yet.');
    if ($path[0] == 'node' && is_numeric($path[1])) {
      $team = node_load($path[1]);
      $ranks = _scorecreep_get_ranks_for_team($team);
      if (!empty($ranks)) {
        foreach ($ranks as $r) {
          $rows[] = array_map('check_plain', $r);
        }
        $header = array(t('Bout'), t('Rank'), t('Score'));
        $output .= theme('table', array('header' => $header, 'rows' => $rows));
      }
    }
    break;
  }

  $block = array(
    'subject' => $subject,
    'content' => $output,
  );
  return $block;
}


/** 
 * Implements hook_menu_alter().
 */
//function scorecreep_menu_alter(&$items) {
  
//}

/**
 * Custom callback that builds our content and returns it to the browser.
 *
 * @return
 *   a build array
 *
 */
function scorecreep_page() {
  /*
  $build = array();
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
  $result = db_query($sql,
    array(
      ':type' => 'scorecreep_performance',
      ':status' => 1,
    )
  );

  // Loop through each of our scorecreep nodes and instruct node_view
  // to use our custom "example_node_list" view.
  // http://api.drupal.org/api/function/node_load/7
  // http://api.drupal.org/api/function/node_view/7
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $build['node_list'][]= node_view($node, 'scorecreep_performance_list');
  }

  return $build;
  */
  // TODO List tournaments
  return t('Welcome to the PSi Scorecreep.');
}

/**
 * Custom callback for bout pages.
 * @return
 *   a build array
 */
function bout_page_view($node) {
    // If there is a menu link to this node, the link becomes the last part
  // of the active trail, and the link name becomes the page title.
  // Thus, we must explicitly set the page title to be the node title.
  drupal_set_title($node->title);
  $uri = entity_uri('node', $node);
  // Set the node path as the canonical URL to prevent duplicate content.
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);
  return node_show($node);
}

/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 *
 */
/*
function scorecreep_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['scorecreep_performance_list'] = array(
    'label' => t('Example Node List'),
    'custom settings' => TRUE,
  );
}
*/


/**
 * Implements hook_field_formatter_info().
 */
/*
function scorecreep_field_formatter_info() {
  return array(
    'scorecreep_colors' => array(
      'label' => t('Node Example Color Handle'),
      'field types' => array('text'),
    ),
  );
}
*/

/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed to enter
 * during node creation.
 */
/*
function scorecreep_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'scorecreep_colors':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $color = $item['safe_value'];
        $element[$delta]['#markup'] = theme('example_node_color', array('color' => $color));
      }
      break;
  }

  return $element;
}
*/

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
/*
function scorecreep_theme($existing, $type, $theme, $path) {
  return array(
    'example_node_color' => array(
      'variables' => array('color' => NULL),
    ),
  );
}
*/

/**
 * Implements hook_help().
 */
function scorecreep_help($path, $arg) {
  switch ($path) {
    case 'scorecreep':
      return "<p>" . t(
        "The scorecreep module is a score keeping helper for PSi.
        You can create tournaments, bouts, teams, venues, performers, and performances."
        ) . "</p>";
  }
}

/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish.  This is a simplifed theme
 * function purely for illustrative purposes.
 */
/*
function theme_example_node_color($variables) {
  $output = '<span style="background-color: #ccc; padding: 1em; margin-bottom: 1em; float: left; color: ' . $variables['color'] . '">' . $variables['color'] . '</span>';
  return $output;
}
*/


/**
 * Implementation of hook_enable().
 *
 * Add roles.
 */
function scorecreep_enable() {
  $newRoles = array('scorekeeper', 'scores admin');
  foreach ($newRoles as $r) {
    if (!user_role_load_by_name($r)) {
      $role = new stdClass();
      $role->name = $r;
      user_role_save($role);
    }
  }

  $rl = user_role_load_by_name('scorekeeper');
  user_role_grant_permissions($rl->rid, array('create scorecreep_performance content', 'edit own scorecreep_performance content'));
  $rl = user_role_load_by_name('scores admin');
  user_role_grant_permissions($rl->rid, array('create scorecreep_performance content', 'edit own scorecreep_performance content', 'edit any scorecreep_performance content', 'delete any scorecreep_performance content', 'delete own scorecreep_performance content'));
}

/**
 * Implements hook_disbale.
 */
function scorecreep_disable() {
  $scRoles = array('scorekeeper', 'scores admin');
  $roles = user_roles();
  foreach ($scRoles as $r) {
    if (in_array($r, $roles)) {
      user_role_delete($r);
    }
  }
}


