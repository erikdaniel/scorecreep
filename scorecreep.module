<?php

/**
 * @file
 * Custom content for PSi Scorecreep module. 
 * This module is designed to keep score for the National Poetyr Slam.
 * @see http://poetryslam.com
 * @see http://nps2011.com
 */
module_load_include('inc', 'node', 'node.pages');   
module_load_include('inc', 'scorecreep', 'scorecreep.utils');   
/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view
 * mode that will live at http://example.com/?q=examples/scorecreep
 */
function scorecreep_menu() {
  // todo add bout view
  // TODO add scores view
  $items['node/%node/scores'] = array(
    'title' => 'Prelim Scores',
    'page callback' => 'tournament_scores_page',
    'access callback' => 'scorecreep_access',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'scorecreep.pages.inc',
    'weight' => 10,
  );
  
  $items['node/%node/grouppieces'] = array(
    'title' => 'Group Piece Scores',
    'page callback' => 'tournament_group_scores_page',
    'page arguments' => array(1),
    'access callback' => 'scorecreep_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    'file' => 'scorecreep.pages.inc',
  );
  
  $items['node/%node/prelim-bouts'] = array(
    'title' => 'Bouts',
    'description' => 'Bouts for this tournament.',
    'page callback' => 'scorecreep_bouts_list',
    'page arguments' => array(1),
    'access callback' => 'scorecreep_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'scorecreep.pages.inc',
  );

  $items['scorecreep/bout/%node'] = array(
    'title callback' => 'bout_page_title',
    'title arguments' => array(2),
    // The page callback also invokes drupal_set_title() in case
    // the menu router's title is overridden by a menu link.
    'page callback' => 'bout_page_view',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
  );
  $items['scorecreep/bout/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
$items['scorecreep/bout/%node/performances'] = array(
      'title' => 'Performances',
      'page callback' => 'bout_page_performances',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'scorecreep.pages.inc',
      'access callback' => array('performance_tab_access'),
      'access arguments' => array(2),
  );
$items['node/%node/performances'] = array(
      'title' => 'Performances',
      'page callback' => 'bout_page_performances',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'file' => 'scorecreep.pages.inc',
      'access callback' => array('performance_tab_access'),
      'access arguments' => array(1),
    );

  $items['scorecreep/bout/%bout_term_id/add/performance'] = array(
    'title' => 'Add Performance',
    'title callback' => 'check_plain',
    'page callback' => 'performance_add',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'scorecreep_performance'),
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'description' => '',
    //'file' => 'node.pages.inc',
  );

  return $items;
}

/**
 * Access callback for the performances tab.
 */
function performance_tab_access($node) {
  $bout_type = NULL;
  if (isset($node->field_bout_type[$node->language])) {
    $bout_type = $node->field_bout_type[$node->language][0]['value'];
  }
  return $node->type == 'scorecreep_bout' &&(!isset($bout_type) || $bout_type == 'team');// && user_access('view published content');
}

/**
 * Access callback for scorecreep content
 */
function scorecreep_access($node) {
  return $node->type == 'tournament';
}

/**
 * Returns a node submission form.
 */
function performance_add($bout) {
  global $user;
  $type = 'scorecreep_performance';
  $bout_term = taxonomy_term_load($bout);
  $types = node_type_get_types();
  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
  drupal_set_title(t('Add @name to @bout', array('@name' => $types[$type]->name, '@bout' => $bout_term->name)), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node, (object)array('bout_id' => $bout_term->tid));
  return $output;
}

/**
 * Implements hook_FORM_TYPE_form_alter().
 *
 */
function scorecreep_form_scorecreep_performance_node_form_alter(&$form, &$form_state, $form_id) {
  $bout_id = isset($form_state['build_info']['args'][1]->bout_id) ? $form_state['build_info']['args'][1]->bout_id:null;
  // only edit the form if we are in a bout/%/performance/add
  if (isset($bout_id)) {
    $bout_node_id = _scorecreep_get_bout_node_id_from_tid($bout_id);
    $form_state['scorecreep']['bout'] = $bout_node_id->nid;

    $teams =  _scorecreep_get_teams_in_bout_by_tid($bout_id);
    $team_ids = array();
 

    $options = $form['field_performance_team']['und']['#options'];
    $newarr = array('_none' => '- Select a value -');
    foreach ($teams as $key => $val) {
      $newarr[$key] = $options[$key];
      $team_ids[] = $key;
    }
    $form['field_performance_team']['und']['#options'] = $newarr;

    $num_perfs_in_bout =  count(_scorecreep_get_performances_in_bout($bout_id)); 
    $rotation = 1;
    if ($num_perfs_in_bout < 4) {
    }
    else if ($num_perfs_in_bout < 8) {
      $rotation = 2;
    }
    else if ($num_perfs_in_bout < 12) {
      $rotation = 3;
    }
    else if ($num_perfs_in_bout < 16) {
      $rotation = 4;
    }
    else {
      $rotation = 5;
    }
    // TODO hide this field
    $form['field_rotation']['und'][0]['value']['#default_value'] =  $rotation;

    // handle performers
    $all_performers = $form['field_performance_performer']['und']['#options'];
    $bout_performers =  _scorecreep_get_performers_from_team_id($team_ids);
    $new_performers = array('_none' => '- None -');

    foreach($bout_performers as $key => $val) {
      $new_performers[$key] = '(' . $val->title . ')' . $all_performers[$key];
    }
    $form['field_performance_performer']['und']['#options'] = $new_performers;

    $form['title']['#default_value'] = t('Untitled');

    // Converting the bout from textfield to 'value' so its not exposed in this form
    $form['field_bout']['und']['#type'] = 'value';
    $form['field_bout']['und']['#value'] =  $bout_id;

    // Add our custom submit handler.
    $form['actions']['submit']['#submit'][] = 'scorecreep_performance_set_redirect'; 
  }
}


/**
 * Handler to set the redirect on a performance submit
 * back to the bout.
 */
function scorecreep_performance_set_redirect( $form, &$form_state) {
  $bout_id = $form_state['scorecreep']['bout'];
  // TODO redo this to get the correct bout id
  $alias = drupal_lookup_path('alias', 'node/' . $bout_id);
  $form_state['redirect'] = $alias;
}

/**
 * Bout title creation Callback.
 */
function bout_page_title($node) {
  return '';
}

/**
 * Implements hook_block_info().
 */
function scorecreep_block_info() {
  $blocks = array();

  $blocks['bout_scores'] = array(
    'info' => t('Display scores and ranks for bout.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['team_scores'] = array(
    'info' => t('Display scores and ranks for a team.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


function scorecreep_block_view($delta = '') {
  $output = '';
  $path = explode('/', request_path());
  switch ($delta) {
    case 'bout_scores':
    $subject = t('Total Scores');
    if ($path[0] == 'scorecreep' && $path[1] == 'bout') {
      $bout_id = bout_id_or_alias_load($path[2]);
      if ($node = menu_get_object()) {
        $bout_id = $node->field_bout['und'][0]['tid'];
      }
      $scores = _scorecreep_get_bout_scores($bout_id);
      $entries = _scorecreep_parse_bout_scores($scores);

      if (!empty($entries)) {
        foreach ($entries as $entry) {
          // Sanitize the data before handing it off to the theme layer.
          $e = array_map('check_plain', $entry);
          $rows[] = array('team' => $e['team'], 
                          'rank' => $e['rank'],
                          'score' => $e['score']
                          );
        }
        // Make a table for them.
        $header = array(t('Team'), t('Rank'), t('Score'));
        $output .= theme('table', array('header' => $header, 'rows' => $rows));
      }
      else {
        $output = t('No scores in this bout.');
      }
    }
    else {
      $output = t('No bout id.');
    }
    break;

  case 'team_scores':
    $team = array();
    $subject = t('Team Scores');
    $output = '';
    if ($path[0] == 'node' && is_numeric($path[1])) {
      $team = node_load($path[1]);
      $ranks = _scorecreep_get_ranks_for_team($team);
      if (!empty($ranks)) {
        foreach ($ranks as $r) {
          $rows[] = array_map('check_plain', $r);
        }
        $header = array(t('Bout'), t('Rank'), t('Score'));
        $output .= theme('table', array('header' => $header, 'rows' => $rows));
      }
      else {
        $output = t('No ranks or scores for this team yet.');
      }
    }
    break;
  }

  $block = array(
    'subject' => $subject,
    'content' => $output,
  );
  return $block;
}

/**
 * Custom callback for bout pages.
 * @return
 *   a build array
 */
function bout_page_view($node) {
  // If there is a menu link to this node, the link becomes the last part
  // of the active trail, and the link name becomes the page title.
  // Thus, we must explicitly set the page title to be the node title.
  dvm($node);
  drupal_set_title($node->title);
  $uri = entity_uri('node', $node);
  // Set the node path as the canonical URL to prevent duplicate content.
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  $node->content['scores'] = array(
    '#markup' => views_embed_view('performances_in_bout'),
    '#weight' => 10,
  );
  dvm($node);
  return node_show($node);
}

/**
 * Implements hook_help().
 */
function scorecreep_help($path, $arg) {
  switch ($path) {
    case 'scorecreep':
      return "<p>" . t(
        "The scorecreep module is a score keeping helper for PSi.
        You can create tournaments, bouts, teams, venues, performers, and performances."
        ) . "</p>";
  }
}


/**
 * Implementation of hook_enable().
 *
 * Add roles.
 */
function scorecreep_enable() {
  $newRoles = array('scorekeeper', 'scores admin');
  foreach ($newRoles as $r) {
    if (!user_role_load_by_name($r)) {
      $role = new stdClass();
      $role->name = $r;
      user_role_save($role);
    }
  }

  $rl = user_role_load_by_name('scorekeeper');
  user_role_grant_permissions($rl->rid, array('create scorecreep_performance content', 'edit own scorecreep_performance content'));
  $rl = user_role_load_by_name('scores admin');
  user_role_grant_permissions($rl->rid, array('create scorecreep_performance content', 'edit own scorecreep_performance content', 'edit any scorecreep_performance content', 'delete any scorecreep_performance content', 'delete own scorecreep_performance content'));
}

/**
 * Implements hook_disbale.
 */
function scorecreep_disable() {
  $scRoles = array('scorekeeper', 'scores admin');
  $roles = user_roles();
  foreach ($scRoles as $r) {
    if (in_array($r, $roles)) {
      user_role_delete($r);
    }
  }
}

